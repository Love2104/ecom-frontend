// Add this function to the Account component to fetch and display orders

// Inside the Account component:
const [orders, setOrders] = useState([]);
const [loadingOrders, setLoadingOrders] = useState(false);
const [orderError, setOrderError] = useState(null);

const fetchOrders = useCallback(async () => {
  if (!isAuthenticated) return;
  
  setLoadingOrders(true);
  setOrderError(null);
  
  try {
    const { getMyOrders } = useCart();
    const result = await getMyOrders();
    
    if (result.success) {
      setOrders(result.orders);
    } else {
      setOrderError(result.error || 'Failed to load orders');
    }
  } catch (err) {
    setOrderError('An error occurred while fetching orders');
    console.error(err);
  } finally {
    setLoadingOrders(false);
  }
}, [isAuthenticated]);

useEffect(() => {
  if (activeTab === 'orders') {
    fetchOrders();
  }
}, [activeTab, fetchOrders]);

// Add this to the nav section:
<button
  onClick={() => setActiveTab('orders')}
  className={`w-full flex items-center space-x-2 p-2 rounded-md text-left ${
    activeTab === 'orders' 
      ? 'bg-primary/10 text-primary font-medium' 
      : 'hover:bg-muted'
  }`}
>
  <Package size={18} />
  <span>Orders</span>
</button>

// Add this to the main content section:
{activeTab === 'orders' && (
  <Card>
    <CardHeader>
      <CardTitle>Your Orders</CardTitle>
    </CardHeader>
    <CardContent>
      {orderError && (
        <div className="bg-destructive/10 text-destructive p-4 rounded-md mb-6">
          {orderError}
        </div>
      )}
      
      {loadingOrders ? (
        <div className="space-y-4">
          {Array.from({ length: 3 }).map((_, index) => (
            <div key={index} className="animate-pulse">
              <div className="h-12 bg-muted rounded mb-2"></div>
              <div className="h-24 bg-muted/50 rounded"></div>
            </div>
          ))}
        </div>
      ) : orders.length === 0 ? (
        <div className="text-center py-8">
          <p className="text-muted-foreground">You haven't placed any orders yet.</p>
          <Button asChild className="mt-4">
            <Link to="/products">Start Shopping</Link>
          </Button>
        </div>
      ) : (
        <div className="space-y-6">
          {orders.map((order) => (
            <div key={order.id} className="border border-border rounded-lg overflow-hidden">
              <div className="bg-muted p-4 flex justify-between items-center">
                <div>
                  <div className="text-sm text-muted-foreground">Order #{order.id.substring(0, 8)}</div>
                  <div className="font-medium">{formatDate(order.created_at)}</div>
                </div>
                <div>
                  <Badge 
                    variant={
                      order.status === 'delivered' ? 'success' :
                      order.status === 'cancelled' ? 'destructive' : 
                      'secondary'
                    }
                  >
                    {order.status.charAt(0).toUpperCase() + order.status.slice(1)}
                  </Badge>
                </div>
              </div>
              <div className="p-4">
                <div className="mb-4">
                  <div className="text-sm text-muted-foreground mb-1">Items</div>
                  {order.items.map((item) => (
                    <div key={item.id} className="flex justify-between py-1">
                      <div>{item.product_name} x {item.quantity}</div>
                      <div>{formatPrice(item.price * item.quantity)}</div>
                    </div>
                  ))}
                </div>
                <Separator className="my-4" />
                <div className="flex justify-between font-medium">
                  <div>Total</div>
                  <div>{formatPrice(order.total)}</div>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}
    </CardContent>
  </Card>
)}